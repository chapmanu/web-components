// Generated by CoffeeScript 1.6.3
/*
# node-make-sync
# Copyright(c) 2012 Seb Vincent
# MIT Licensed
*/


/*
# Option class parser. Options may be like the following examples.
#
# {
#   mode: ['mixed','args']
#   exclude: ['f', /^_/]
#   num_of_args:
#     g: 1
# }
#
# {
# exclude: '*'
# include: ['f', 'g']
# num_of_args:
#   f: 2
#
# sync-return:
#   '*': [err,res]
#   f: (rawArgs) ->
#     ...
#     res
#
#
# }
#
# { exclude: 'f' }
# { exclude: /^_/}
#
*/


(function() {
  var CoffeeScript, Options, _;

  _ = require("lodash");

  CoffeeScript = require('coffee-script');

  Options = (function() {
    function Options(options) {
      if (options == null) {
        options = {};
      }
      this._options = options;
    }

    Options.prototype.isIncluded = function(target) {
      var key, res, rule, ruleDef, rules, _i, _len, _ref;
      res = true;
      ruleDef = {
        exclude: function(rule) {
          return res = res && !target.match(rule);
        },
        include: function(rule) {
          return res = res || target.match(rule);
        }
      };
      _ref = this._options;
      for (key in _ref) {
        rules = _ref[key];
        if (!(ruleDef[key] != null)) {
          continue;
        }
        if (!(rules instanceof Array)) {
          rules = [rules];
        }
        for (_i = 0, _len = rules.length; _i < _len; _i++) {
          rule = rules[_i];
          if (rule === '*') {
            rule = /.*/;
          }
          if (typeof rule === 'string') {
            rule = RegExp("^" + rule + "$");
          }
          ruleDef[key](rule);
        }
      }
      return res || false;
    };

    Options.prototype.numOfParams = function(target) {
      var _ref;
      if ((target != null)) {
        return (_ref = this._options.num_of_args) != null ? _ref[target] : void 0;
      } else {
        return this._options.num_of_args;
      }
    };

    Options.prototype.mode = function() {
      var mode, primary, secondary;
      mode = this._options.mode || [];
      if (!(mode instanceof Array)) {
        mode = [mode];
      }
      primary = _.last(mode.filter(function(mode) {
        return mode === 'sync' || mode === 'async' || mode === 'mixed';
      })) || 'sync';
      secondary = [
        _.last(mode.filter(function(mode) {
          return mode === 'args' || mode === 'fibers';
        })) || 'args'
      ];
      if (primary === 'sync' || primary === 'async') {
        secondary = [];
      }
      return [primary].concat(secondary);
    };

    Options.prototype.syncReturn = function(target) {
      var builder, res, resultBuilderAsString, resultBuilderJs, rule, _ref, _ref1, _ref2, _ref3, _ref4;
      res = 'err,res';
      if ((target != null)) {
        if ((typeof ((_ref = this._options) != null ? _ref['sync-return'] : void 0)) === 'object') {
          _ref2 = (_ref1 = this._options) != null ? _ref1['sync-return'] : void 0;
          for (rule in _ref2) {
            builder = _ref2[rule];
            if (rule === '*') {
              rule = /.*/;
            }
            if (typeof rule === 'string') {
              rule = RegExp("^" + rule + "$");
            }
            if (target.match(rule)) {
              res = builder;
            }
          }
        } else {
          res = ((_ref3 = this._options) != null ? _ref3['sync-return'] : void 0) || res;
        }
      } else {
        res = ((_ref4 = this._options) != null ? _ref4['sync-return'] : void 0) || res;
      }
      if ((typeof res) === 'string') {
        resultBuilderAsString = "resultBuilder = (rawRes...) ->\n  [err,res] = []\n  [" + res + "] = rawRes\n  throw err if err?\n  return res";
        resultBuilderJs = CoffeeScript.compile(resultBuilderAsString, {
          bare: 'on'
        });
        eval(resultBuilderJs);
        res = resultBuilder;
      }
      return res;
    };

    return Options;

  })();

  exports.Options = Options;

}).call(this);
