// Generated by CoffeeScript 1.6.3
(function() {
  var exec, hasChildProcess, makeSync, phantom, should, sync, _ref;

  should = require('should');

  exec = require('child_process').exec;

  makeSync = require('make-sync').makeSync;

  _ref = require('../lib/phantom-sync'), phantom = _ref.phantom, sync = _ref.sync;

  hasChildProcess = makeSync(function(ppid, done) {
    return exec('ps -Ao ppid,pid', function(err, stdout, stderr) {
      var count, line;
      count = ((function() {
        var _i, _len, _ref1, _results;
        _ref1 = stdout.split('\n');
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          line = _ref1[_i];
          if (line.trim().match(RegExp("^" + ppid + "\\s+\\d+"))) {
            _results.push('');
          }
        }
        return _results;
      })()).length;
      return done(null, count > 1);
    });
  });

  describe("phantom-sync", function() {
    return describe("sync", function() {
      return describe("basics", function() {
        var ph;
        ph = null;
        after(function(done) {
          return sync(function() {
            if (ph != null) {
              ph.exitAndWait(500);
            }
            return done();
          });
        });
        describe("create an instance", function() {
          it("should work", function(done) {
            return sync(function() {
              ph = phantom.create();
              ph.should.have.type('object');
              return done();
            });
          });
          return it("version defined and greater than 1.3", function(done) {
            return sync(function() {
              var ver;
              ver = ph.get('version');
              should.exist(ver);
              (ver.major >= 1).should.be["true"];
              (ver.minor >= 3).should.be["true"];
              return done();
            });
          });
        });
        describe("inject Javascript from a file", function() {
          return it("should work", function(done) {
            return sync(function() {
              var success;
              success = ph.injectJs('test/inject.js');
              success.should.be.ok;
              return done();
            });
          });
        });
        describe("can create a page", function() {
          return it("should work", function(done) {
            return sync(function() {
              var page;
              page = ph.createPage();
              page.should.have.type('object');
              return done();
            });
          });
        });
        return describe("call exit()", function() {
          return it("should work", function(done) {
            return sync(function() {
              (hasChildProcess(process.pid)).should.be["true"];
              ph.exit();
              return setTimeout(function() {
                return sync(function() {
                  (hasChildProcess(process.pid)).should.be["false"];
                  return done();
                });
              }, 500);
            });
          });
        });
      });
    });
  });

}).call(this);
