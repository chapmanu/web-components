


// Configs
$gutters: 2%;
$column-prefix: 'column-';
$column-number:  16; // how many columns?

// Breakpoints
$extra-small-start: 30em !default;
$small-start:       48em !default;
$medium-start:      60em !default;
$large-start:       70em !default;
$extra-large-start: 80em !default;

.container { width: 90%; margin:0 auto; }

@media (min-width: 48em) /* 768px */ { .container { width: 620px; } }

@media (min-width: 60em) /* 960px */ { .container { width: 768px; } }

@media (min-width: 70em) /* 1120px */ { .container { width: 960px; } }

@media (min-width: 80em) /* 1280px */ { .container { width: 1140px; } }


//
// By passing in one of the pre-defined media queries that
// are packaged with Concise by default, you can easily
// create styles that are built from the ground-up to be
// mobile friendly.
//
//  `@include breakpoint(extra-small) { ... }`
//
//
@mixin breakpoint($point) {
  @if $point == extra-small {
    @media (min-width: $extra-small-start)  { @content; }
  }

  @else if $point == small {
    @media (min-width: $small-start)  { @content; }
  }

  @else if $point == medium {
    @media (min-width: $medium-start) { @content; }
  }

  @else if $point == large {
    @media (min-width: $large-start) { @content; }
  }

  @else if $point == extra-large {
    @media (min-width: $extra-large-start) { @content; }
  }

  @else if $point == high-density {
    @media only screen and (-webkit-min-device-pixel-ratio: 1.5),
           only screen and (min--moz-device-pixel-ratio: 1.5),
           only screen and (-o-min-device-pixel-ratio: 3/2),
           only screen and (min-device-pixel-ratio: 1.5) { @content; }
  }
}


//
// Create variable-number grid columns given the value
// for variable `$column-number`
//
@mixin grid-setup($number: $column-number) {
  // Assign percentage-based widths for columns
  @for $i from 1 through $number {
    .#{$column-prefix + $i} { width: 100% / $number * $i; }
  }

  @for $i from 1 through $number {
    // Style all but the last column
    $width-of-column: (100% - $gutters * ($number - 1)) / $number;

    .gutters .#{$column-prefix + $i} {
      width: $width-of-column * $i + $gutters * ($i - 1);
      content: $gutters * ($i - 1);
    }
  }
}

//
// Create proper `.push-` classes given the value
// for variable `$column-number`
//
@mixin push-setup($number: $column-number) {
  @for $i from 1 to $number {
    .push-#{$i} { left: 100% / $number * $i; }
  }

  @for $i from 1 to $number {
    .gutters .push-#{$i} { left: 100% / $number * $i - $gutters; }
  }
}


//
// Create proper `.pull-` classes given the value
// for variable `$column-number`
//
@mixin pull-setup($number: $column-number) {
  @for $i from 1 to $number {
    .pull-#{$i} { right: 100% / $number * $i; }
  }

  @for $i from 1 to $number {
    .gutters .pull-#{$i} { right: 100% / $number * $i - $gutters; }
  }
}


//------------------------------------
//  GRID
//------------------------------------
.row {
	width: 100%;

	&:after {
		clear: both;
		content: " ";
		display: table;
	}
}

[class*='#{$column-prefix}'] {
	background-clip: padding-box;

	&.right { float: right; }

	img { max-width: 100%; }
}

@include breakpoint(small) {
	[class*='#{$column-prefix}'] { float: left; }

	.gutters [class*='#{$column-prefix}'] {
		margin-left: $gutters;

		&:first-child { margin-left: 0; }
	}


	// Row columns
	@include grid-setup();


	// Push / pull
	[class*='push-'] { position: relative; }
	@include push-setup();

	[class*='pull-'] { position: relative; }
	@include pull-setup();

}


// Non-responsive grid
.non-responsive {
	[class*='#{$column-prefix}'] {
		float: left;
		width: auto !important;
	}

	.gutters [class*='#{$column-prefix}'],
	&.gutters [class*='#{$column-prefix}'] { margin-left: $gutters; }

	.gutters [class*='#{$column-prefix}']:first-child,
	&.gutters [class*='#{$column-prefix}']:first-child { margin-left: 0; }
}
